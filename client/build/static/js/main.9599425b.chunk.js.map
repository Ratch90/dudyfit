{"version":3,"sources":["logo.svg","components/trainers/trainers.js","components/clients/clients.js","components/container/container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Trainers","listOfTrainers","this","props","list","renderTo","renderType","classicRender","map","trainer","index","key","name","reputation","spots","clientsRender","clients","client","importance","Component","Clients","Container","trainers","SortingHelper","arr","result","toCompare","i","length","temp","j","App","handleClick","a","state","paired","setState","pairingData","fetch","resp","json","data","finalTrainersList","finalClientsList","personalTrainer","push","buttonText","checkParity","containerTemplate","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9599425b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\nimport './trainer.css'\r\n\r\nclass Trainers extends Component {\r\n\r\n    render() {\r\n        \r\n        const listOfTrainers = this.props.list;\r\n        const renderType = this.props.renderType;\r\n        const renderTo = (renderType === 'classic') ? 'classic' : 'childs';\r\n\r\n        const classicRender = listOfTrainers.map((trainer,index) => {\r\n            return <li key={index}>Name: {trainer.name} Reputation : {trainer.reputation} Spots : {trainer.spots}</li>\r\n        })\r\n\r\n        const clientsRender = listOfTrainers.map((trainer) => {\r\n            return (\r\n                <div>\r\n                    <h2>{trainer.name}, reputation : {trainer.reputation}</h2>\r\n                    <h4>His/Her clients are: </h4>\r\n                    <ul>\r\n                       {\r\n                         trainer.clients.map((client,index) => {\r\n                             return <li key={index}>{client.name} {client.importance}</li>\r\n                         })\r\n                       } \r\n                    </ul>\r\n                </div>\r\n            )\r\n        })\r\n\r\n\r\n        return (\r\n            <div>\r\n                <h2>Trainers</h2>\r\n                <ul>\r\n                  {\r\n                    renderTo === 'classic' ? classicRender : clientsRender\r\n                  }\r\n                   \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Trainers;","import React, {Component} from 'react'\r\nimport './client.css'\r\n\r\nclass Clients extends Component {\r\n\r\n     \r\n    render() {\r\n       \r\n        return (\r\n            <div>\r\n                <h2>Clients</h2>\r\n                <ul>\r\n                   {this.props.list.map((client,index) => {\r\n                       return <li key={index}>Name: {client.name} Importance: {client.importance}</li>\r\n                   })} \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clients;","import React,{Component} from 'react';\r\nimport Trainers from '../trainers/trainers';\r\nimport Clients from '../clients/clients'\r\n\r\nclass Container extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Trainers list={this.props.trainers} renderType='classic'/>\r\n                <Clients list={this.props.clients}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container;","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from './components/container/container';\nimport Trainers from './components/trainers/trainers'\n\nconst SortingHelper = (arr) => {\n\n    // Se la hace una copia a la lista original para que el algoritmo no modifique el estado inicial de esta\n    let result = [...arr]; \n    // Mediante este operador ternario calculamos que lista nos pasan(Clientes o Trainers) en dependencia\n    // de sus propiedades reputation o importance respectivamente y asi no tenemos que implementar\n    // dos metodos de ordenamientos;1 para cada lista, este es generico y sirve para las 2\n    const toCompare = (result[0].reputation) ? 'reputation' : 'importance'; \n    // Implementacion manual de un algoritmo de ordenacion \n    for (let i = 0; i < result.length;i++) {\n        let temp;\n        for (let j = i+1; j < result.length;j++) {\n            if (result[i][toCompare] < result[j][toCompare]) {\n                temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n            }\n        }\n    }\n    // Retorna la lista ordenada de mayor a menor en base a su propiedad(importance o reputaion)\n    return result;\n}\nclass App extends Component{\n\n  constructor() {\n    super();\n    this.state = {\n      trainers : [],\n      clients : [],\n      paired: false\n    }\n  }\n\n  async componentDidMount() {\n\n    const resp = await fetch('/api');\n    const data = await resp.json();\n    this.setState({\n      trainers : data.trainers,\n      clients : data.clients,\n    });\n \n}\n\n  pairingData() {\n\n    let finalTrainersList = SortingHelper(this.state.trainers);\n    let finalClientsList = SortingHelper(this.state.clients);\n\n       for (const client of finalClientsList) {\n           for (const trainer of finalTrainersList) {\n               if (trainer.spots > 0 ) {\n                 client.personalTrainer = trainer.name;\n                 trainer.clients.push(client);\n                 trainer.spots--;\n                 break;\n               }\n           }\n       }\n    return finalTrainersList;\n  }\n\n\n  handleClick  = async () =>  {\n\n    if (!this.state.paired) {\n        this.setState({\n        trainers: this.pairingData(),\n        paired : !this.state.paired});\n         \n    }\n    else {\n      this.setState({\n        trainers: this.state.trainers,\n        paired : !this.state.paired\n      })\n    }\n }\n  \n\n  render() {\n    const buttonText = !this.state.paired ? 'Pairing' : 'Go Back';\n    const trainers = this.state.trainers;\n    const clients = this.state.clients;\n    const checkParity = this.state.paired;\n    const containerTemplate = <Container trainers={trainers} clients = {clients}/>\n    \n    return (\n      <div className=\"App\">\n        {\n          (!checkParity) ? containerTemplate : <Trainers list={trainers} renderType='childs' />\n         \n        }\n        <button onClick={this.handleClick}>\n          {buttonText}\n        </button>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}